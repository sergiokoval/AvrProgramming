
uartTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  000001de  00000272  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000085  00800088  00800088  0000029a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000029a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009a7  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000073a  00000000  00000000  00000d37  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004f6  00000000  00000000  00001471  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000174  00000000  00000000  00001968  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ea  00000000  00000000  00001adc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004aa  00000000  00000000  00001ec6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002370  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	c4 c0       	rjmp	.+392    	; 0x1a0 <__vector_11>
  18:	9c c0       	rjmp	.+312    	; 0x152 <__vector_12>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ee ed       	ldi	r30, 0xDE	; 222
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a8 38       	cpi	r26, 0x88	; 136
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	21 e0       	ldi	r18, 0x01	; 1
  4a:	a8 e8       	ldi	r26, 0x88	; 136
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ad 30       	cpi	r26, 0x0D	; 13
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	02 d0       	rcall	.+4      	; 0x5e <main>
  5a:	bf c0       	rjmp	.+382    	; 0x1da <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <main>:
#include <avr/io.h>
#include <util/delay.h>
#include "uart.h"

int main(void)
{
  5e:	cf 93       	push	r28
  60:	df 93       	push	r29
  62:	cd b7       	in	r28, 0x3d	; 61
  64:	de b7       	in	r29, 0x3e	; 62
  66:	2a 97       	sbiw	r28, 0x0a	; 10
  68:	0f b6       	in	r0, 0x3f	; 63
  6a:	f8 94       	cli
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	0f be       	out	0x3f, r0	; 63
  70:	cd bf       	out	0x3d, r28	; 61
	DDRB |= (1<< PINB0);
  72:	b8 9a       	sbi	0x17, 0	; 23
	PORTB &= ~(1<<PINB0);
  74:	c0 98       	cbi	0x18, 0	; 24
	UART_init();
  76:	1f d0       	rcall	.+62     	; 0xb6 <UART_init>
	UART_puts("Init complete\r\n");
  78:	80 e6       	ldi	r24, 0x60	; 96
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	56 d0       	rcall	.+172    	; 0x12a <UART_puts>

	int val  = SREG;
  7e:	8f b7       	in	r24, 0x3f	; 63
			//UART_puts(bytesAvailable);
		}

		volatile uint8_t *port = &PORTB;

		*port ^= (1<< PINB0);
  80:	11 e0       	ldi	r17, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	2f e3       	ldi	r18, 0x3F	; 63
  84:	8d e0       	ldi	r24, 0x0D	; 13
  86:	93 e0       	ldi	r25, 0x03	; 3
  88:	21 50       	subi	r18, 0x01	; 1
  8a:	80 40       	sbci	r24, 0x00	; 0
  8c:	90 40       	sbci	r25, 0x00	; 0
  8e:	e1 f7       	brne	.-8      	; 0x88 <main+0x2a>
  90:	00 c0       	rjmp	.+0      	; 0x92 <main+0x34>
  92:	00 00       	nop
   
    while (1) 
    {
		_delay_ms(1000);

		unsigned char bytesAvailable = UART_rbuflen() ; 
  94:	58 d0       	rcall	.+176    	; 0x146 <UART_rbuflen>
		if(bytesAvailable > 0)
  96:	88 23       	and	r24, r24
  98:	19 f0       	breq	.+6      	; 0xa0 <main+0x42>
		{
			UART_puts( "Got some BYTES\r\n");	
  9a:	80 e7       	ldi	r24, 0x70	; 112
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	45 d0       	rcall	.+138    	; 0x12a <UART_puts>
			//UART_puts(bytesAvailable);
		}

		volatile uint8_t *port = &PORTB;

		*port ^= (1<< PINB0);
  a0:	88 b3       	in	r24, 0x18	; 24
  a2:	81 27       	eor	r24, r17
  a4:	88 bb       	out	0x18, r24	; 24
		*port &= ~(1<< PINB0);
  a6:	c0 98       	cbi	0x18, 0	; 24


		UART_puts("Tick\r\n");	
  a8:	81 e8       	ldi	r24, 0x81	; 129
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	3e d0       	rcall	.+124    	; 0x12a <UART_puts>
		//sprintf(buff,"r\n PORTB %d\r\n",PORTB);
		//sprintf(buff,"r\n PORTB %c\r\n",PORTC);

		

		UART_puts(buff);
  ae:	ce 01       	movw	r24, r28
  b0:	01 96       	adiw	r24, 0x01	; 1
  b2:	3b d0       	rcall	.+118    	; 0x12a <UART_puts>
		 
		
    }
  b4:	e6 cf       	rjmp	.-52     	; 0x82 <main+0x24>

000000b6 <UART_init>:

  // Return the length of the string.
  // It could be a truncated string if too many characters were received.
  // It shou be the same as strlen(buffer)
  return (i);
}
  b6:	f8 94       	cli
  b8:	1b b8       	out	0x0b, r1	; 11
  ba:	1a b8       	out	0x0a, r1	; 10
  bc:	89 e1       	ldi	r24, 0x19	; 25
  be:	89 b9       	out	0x09, r24	; 9
  c0:	10 bc       	out	0x20, r1	; 32
  c2:	88 e9       	ldi	r24, 0x98	; 152
  c4:	8a b9       	out	0x0a, r24	; 10
  c6:	86 e8       	ldi	r24, 0x86	; 134
  c8:	80 bd       	out	0x20, r24	; 32
  ca:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__data_end>
  ce:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <r_out>
  d2:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <r_in>
  d6:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <t_out>
  da:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <t_in>
  de:	78 94       	sei
  e0:	08 95       	ret

000000e2 <UART_tbuflen>:
  e2:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <t_in>
  e6:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <t_out>
  ea:	89 1b       	sub	r24, r25
  ec:	08 95       	ret

000000ee <UART_putc>:
  ee:	1f 93       	push	r17
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
  f4:	18 2f       	mov	r17, r24
  f6:	c0 e4       	ldi	r28, 0x40	; 64
  f8:	d0 e0       	ldi	r29, 0x00	; 0
  fa:	f3 df       	rcall	.-26     	; 0xe2 <UART_tbuflen>
  fc:	9e 01       	movw	r18, r28
  fe:	28 1b       	sub	r18, r24
 100:	31 09       	sbc	r19, r1
 102:	23 30       	cpi	r18, 0x03	; 3
 104:	31 05       	cpc	r19, r1
 106:	cc f3       	brlt	.-14     	; 0xfa <UART_putc+0xc>
 108:	e0 91 8c 00 	lds	r30, 0x008C	; 0x80008c <t_in>
 10c:	ef 73       	andi	r30, 0x3F	; 63
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	e3 53       	subi	r30, 0x33	; 51
 112:	ff 4f       	sbci	r31, 0xFF	; 255
 114:	10 83       	st	Z, r17
 116:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <t_in>
 11a:	8f 5f       	subi	r24, 0xFF	; 255
 11c:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <t_in>
 120:	55 9a       	sbi	0x0a, 5	; 10
 122:	df 91       	pop	r29
 124:	cf 91       	pop	r28
 126:	1f 91       	pop	r17
 128:	08 95       	ret

0000012a <UART_puts>:
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	ec 01       	movw	r28, r24
 130:	88 81       	ld	r24, Y
 132:	88 23       	and	r24, r24
 134:	29 f0       	breq	.+10     	; 0x140 <UART_puts+0x16>
 136:	21 96       	adiw	r28, 0x01	; 1
 138:	da df       	rcall	.-76     	; 0xee <UART_putc>
 13a:	89 91       	ld	r24, Y+
 13c:	81 11       	cpse	r24, r1
 13e:	fc cf       	rjmp	.-8      	; 0x138 <UART_puts+0xe>
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <UART_rbuflen>:
 146:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <r_in>
 14a:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <r_out>
 14e:	89 1b       	sub	r24, r25
 150:	08 95       	ret

00000152 <__vector_12>:
// Transmit complete interrupt
//
// USART transmit Data Register Empty interrupt.
//
ISR (USART_UDRE_vect)           // changed into new name
{
 152:	1f 92       	push	r1
 154:	0f 92       	push	r0
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	0f 92       	push	r0
 15a:	11 24       	eor	r1, r1
 15c:	8f 93       	push	r24
 15e:	9f 93       	push	r25
 160:	ef 93       	push	r30
 162:	ff 93       	push	r31
  if(t_in != t_out)             // is buffer empty ?
 164:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <t_in>
 168:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <t_out>
 16c:	98 17       	cp	r25, r24
 16e:	71 f0       	breq	.+28     	; 0x18c <__vector_12+0x3a>
  {
    UDR0 = tbuf[t_out & TMASK];
 170:	e0 91 8b 00 	lds	r30, 0x008B	; 0x80008b <t_out>
 174:	ef 73       	andi	r30, 0x3F	; 63
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	e3 53       	subi	r30, 0x33	; 51
 17a:	ff 4f       	sbci	r31, 0xFF	; 255
 17c:	80 81       	ld	r24, Z
 17e:	8c b9       	out	0x0c, r24	; 12
    t_out++;                    // TMASK makes it unnecessary to range limit this
 180:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <t_out>
 184:	8f 5f       	subi	r24, 0xFF	; 255
 186:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <t_out>
 18a:	01 c0       	rjmp	.+2      	; 0x18e <__vector_12+0x3c>
  }
  else
  {
    UCSR0B &= ~_BV(UDRIE0);     // buffer is empty, disable interrupt
 18c:	55 98       	cbi	0x0a, 5	; 10
  }
}
 18e:	ff 91       	pop	r31
 190:	ef 91       	pop	r30
 192:	9f 91       	pop	r25
 194:	8f 91       	pop	r24
 196:	0f 90       	pop	r0
 198:	0f be       	out	0x3f, r0	; 63
 19a:	0f 90       	pop	r0
 19c:	1f 90       	pop	r1
 19e:	18 95       	reti

000001a0 <__vector_11>:
// Bad:
//    The characters before the CR or LF might all be gone,
//    if the number of received characters is the same as the input buffer.
//
ISR (USART_RX_vect)           // changed into new name
{
 1a0:	1f 92       	push	r1
 1a2:	0f 92       	push	r0
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	0f 92       	push	r0
 1a8:	11 24       	eor	r1, r1
 1aa:	8f 93       	push	r24
 1ac:	ef 93       	push	r30
 1ae:	ff 93       	push	r31
  rbuf[r_in & RMASK] = UDR0;  // Put received char in buffer (no check for overflow)
 1b0:	e0 91 8a 00 	lds	r30, 0x008A	; 0x80008a <r_in>
 1b4:	ef 73       	andi	r30, 0x3F	; 63
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	8c b1       	in	r24, 0x0c	; 12
 1ba:	e3 57       	subi	r30, 0x73	; 115
 1bc:	ff 4f       	sbci	r31, 0xFF	; 255
 1be:	80 83       	st	Z, r24
  r_in++;                     // RMASK makes it unnecessary to range limit this
 1c0:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <r_in>
 1c4:	8f 5f       	subi	r24, 0xFF	; 255
 1c6:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <r_in>
}
 1ca:	ff 91       	pop	r31
 1cc:	ef 91       	pop	r30
 1ce:	8f 91       	pop	r24
 1d0:	0f 90       	pop	r0
 1d2:	0f be       	out	0x3f, r0	; 63
 1d4:	0f 90       	pop	r0
 1d6:	1f 90       	pop	r1
 1d8:	18 95       	reti

000001da <_exit>:
 1da:	f8 94       	cli

000001dc <__stop_program>:
 1dc:	ff cf       	rjmp	.-2      	; 0x1dc <__stop_program>
