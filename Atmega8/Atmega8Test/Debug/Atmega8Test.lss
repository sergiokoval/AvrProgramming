
Atmega8Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  000001ee  00000262  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d89  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008ce  00000000  00000000  000010f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000041a  00000000  00000000  000019c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00001de0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000563  00000000  00000000  00001ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000022c  00000000  00000000  00002423  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  0000264f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ee ee       	ldi	r30, 0xEE	; 238
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a6 37       	cpi	r26, 0x76	; 118
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>
  48:	2b d0       	rcall	.+86     	; 0xa0 <main>
  4a:	cf c0       	rjmp	.+414    	; 0x1ea <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <_ZN9LedDriver12SetOutputPinEs>:

#include "LedDriver.h"
#include <avr/io.h>

void LedDriver::SetOutputPin(short pin)
{	
  4e:	fc 01       	movw	r30, r24
	*_ddRegister |= (1 << pin);
  50:	a2 81       	ldd	r26, Z+2	; 0x02
  52:	b3 81       	ldd	r27, Z+3	; 0x03
  54:	9c 91       	ld	r25, X
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	30 e0       	ldi	r19, 0x00	; 0
  5a:	02 c0       	rjmp	.+4      	; 0x60 <_ZN9LedDriver12SetOutputPinEs+0x12>
  5c:	22 0f       	add	r18, r18
  5e:	33 1f       	adc	r19, r19
  60:	6a 95       	dec	r22
  62:	e2 f7       	brpl	.-8      	; 0x5c <_ZN9LedDriver12SetOutputPinEs+0xe>
  64:	92 2b       	or	r25, r18
  66:	9c 93       	st	X, r25
	(*_port) &= ~(1 << pin);
  68:	01 90       	ld	r0, Z+
  6a:	f0 81       	ld	r31, Z
  6c:	e0 2d       	mov	r30, r0
  6e:	80 81       	ld	r24, Z
  70:	20 95       	com	r18
  72:	28 23       	and	r18, r24
  74:	20 83       	st	Z, r18
  76:	08 95       	ret

00000078 <_ZN9LedDriver9TogglePinEs>:
}

void LedDriver::TogglePin(short pin)
{
	*_port ^= (1 << pin);
  78:	dc 01       	movw	r26, r24
  7a:	ed 91       	ld	r30, X+
  7c:	fc 91       	ld	r31, X
  7e:	20 81       	ld	r18, Z
  80:	81 e0       	ldi	r24, 0x01	; 1
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	02 c0       	rjmp	.+4      	; 0x8a <_ZN9LedDriver9TogglePinEs+0x12>
  86:	88 0f       	add	r24, r24
  88:	99 1f       	adc	r25, r25
  8a:	6a 95       	dec	r22
  8c:	e2 f7       	brpl	.-8      	; 0x86 <_ZN9LedDriver9TogglePinEs+0xe>
  8e:	82 27       	eor	r24, r18
  90:	80 83       	st	Z, r24
  92:	08 95       	ret

00000094 <_ZN9LedDriverC1EPVhS1_>:
}

// default constructor
LedDriver::LedDriver(volatile uint8_t *port, volatile uint8_t * ddRegister)
{
	this->_port = port;
  94:	fc 01       	movw	r30, r24
  96:	71 83       	std	Z+1, r23	; 0x01
  98:	60 83       	st	Z, r22
	this->_ddRegister = ddRegister;
  9a:	53 83       	std	Z+3, r21	; 0x03
  9c:	42 83       	std	Z+2, r20	; 0x02
  9e:	08 95       	ret

000000a0 <main>:

// todo: extract button driver with lambda as action, upd no need, pass ports by address


int main(void)
{
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
  a4:	cd b7       	in	r28, 0x3d	; 61
  a6:	de b7       	in	r29, 0x3e	; 62
  a8:	2f 97       	sbiw	r28, 0x0f	; 15
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	f8 94       	cli
  ae:	de bf       	out	0x3e, r29	; 62
  b0:	0f be       	out	0x3f, r0	; 63
  b2:	cd bf       	out	0x3d, r28	; 61
	LedDriver driver(&PORTB, &DDRB);
  b4:	47 e3       	ldi	r20, 0x37	; 55
  b6:	50 e0       	ldi	r21, 0x00	; 0
  b8:	68 e3       	ldi	r22, 0x38	; 56
  ba:	70 e0       	ldi	r23, 0x00	; 0
  bc:	ce 01       	movw	r24, r28
  be:	01 96       	adiw	r24, 0x01	; 1
  c0:	e9 df       	rcall	.-46     	; 0x94 <_ZN9LedDriverC1EPVhS1_>
	driver.SetOutputPin(Pin0);
  c2:	60 e0       	ldi	r22, 0x00	; 0
  c4:	70 e0       	ldi	r23, 0x00	; 0
  c6:	ce 01       	movw	r24, r28
  c8:	01 96       	adiw	r24, 0x01	; 1
  ca:	c1 df       	rcall	.-126    	; 0x4e <_ZN9LedDriver12SetOutputPinEs>

	SerialCommunication sc;
	sc.InitUart(25);
  cc:	69 e1       	ldi	r22, 0x19	; 25
  ce:	70 e0       	ldi	r23, 0x00	; 0
  d0:	ce 01       	movw	r24, r28
  d2:	05 96       	adiw	r24, 0x05	; 5
  d4:	38 d0       	rcall	.+112    	; 0x146 <_ZN19SerialCommunication8InitUartEj>

	DDRB &= ~(1 << PINB1);
  d6:	b9 98       	cbi	0x17, 1	; 23
	PORTB |= (1<< PINB1);
  d8:	c1 9a       	sbi	0x18, 1	; 24

	int isButtonPressed = 0;
	int buttonPressedSampling = 0;
  da:	00 e0       	ldi	r16, 0x00	; 0
  dc:	10 e0       	ldi	r17, 0x00	; 0
	sc.InitUart(25);

	DDRB &= ~(1 << PINB1);
	PORTB |= (1<< PINB1);

	int isButtonPressed = 0;
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	c1 2c       	mov	r12, r1
  e4:	d1 2c       	mov	r13, r1
  e6:	ec 2c       	mov	r14, r12
  e8:	fd 2c       	mov	r15, r13
			if(buttonPressedSampling > 1500)
			{
				if(isButtonPressed==0)
				{
					driver.TogglePin(Pin0);
					isButtonPressed = 1;
  ea:	aa 24       	eor	r10, r10
  ec:	a3 94       	inc	r10
  ee:	b1 2c       	mov	r11, r1
  f0:	05 c0       	rjmp	.+10     	; 0xfc <main+0x5c>

					sc.SendString("\r\n Button pressed. \r\n");
					sc.SendString(buff);
					
				}
				buttonPressedSampling = 0;
  f2:	00 e0       	ldi	r16, 0x00	; 0
  f4:	10 e0       	ldi	r17, 0x00	; 0
  f6:	02 c0       	rjmp	.+4      	; 0xfc <main+0x5c>
  f8:	8e 2d       	mov	r24, r14
  fa:	9f 2d       	mov	r25, r15
	int buttonReleasedSampling = 0;

    /* Replace with your application code */
    while (1) 
    {
		if(bit_is_clear(PINB,PINB1))
  fc:	b1 99       	sbic	0x16, 1	; 22
  fe:	fc cf       	rjmp	.-8      	; 0xf8 <main+0x58>
		{
			buttonPressedSampling++;
 100:	0f 5f       	subi	r16, 0xFF	; 255
 102:	1f 4f       	sbci	r17, 0xFF	; 255

			if(buttonPressedSampling > 1500)
 104:	0d 3d       	cpi	r16, 0xDD	; 221
 106:	25 e0       	ldi	r18, 0x05	; 5
 108:	12 07       	cpc	r17, r18
 10a:	c4 f3       	brlt	.-16     	; 0xfc <main+0x5c>
			{
				if(isButtonPressed==0)
 10c:	00 97       	sbiw	r24, 0x00	; 0
 10e:	89 f7       	brne	.-30     	; 0xf2 <main+0x52>
				{
					driver.TogglePin(Pin0);
 110:	6c 2d       	mov	r22, r12
 112:	7d 2d       	mov	r23, r13
 114:	ce 01       	movw	r24, r28
 116:	01 96       	adiw	r24, 0x01	; 1
 118:	af df       	rcall	.-162    	; 0x78 <_ZN9LedDriver9TogglePinEs>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 11a:	4a e0       	ldi	r20, 0x0A	; 10
 11c:	be 01       	movw	r22, r28
 11e:	6a 5f       	subi	r22, 0xFA	; 250
 120:	7f 4f       	sbci	r23, 0xFF	; 255
 122:	c8 01       	movw	r24, r16
 124:	2f d0       	rcall	.+94     	; 0x184 <__itoa_ncheck>
					
					char buff[10];

					itoa(buttonPressedSampling,buff,10);

					sc.SendString("\r\n Button pressed. \r\n");
 126:	60 e6       	ldi	r22, 0x60	; 96
 128:	70 e0       	ldi	r23, 0x00	; 0
 12a:	ce 01       	movw	r24, r28
 12c:	05 96       	adiw	r24, 0x05	; 5
 12e:	16 d0       	rcall	.+44     	; 0x15c <_ZN19SerialCommunication10SendStringEPKc>
					sc.SendString(buff);
 130:	be 01       	movw	r22, r28
 132:	6a 5f       	subi	r22, 0xFA	; 250
 134:	7f 4f       	sbci	r23, 0xFF	; 255
 136:	ce 01       	movw	r24, r28
 138:	05 96       	adiw	r24, 0x05	; 5
 13a:	10 d0       	rcall	.+32     	; 0x15c <_ZN19SerialCommunication10SendStringEPKc>
					
				}
				buttonPressedSampling = 0;
 13c:	00 e0       	ldi	r16, 0x00	; 0
 13e:	10 e0       	ldi	r17, 0x00	; 0
			if(buttonPressedSampling > 1500)
			{
				if(isButtonPressed==0)
				{
					driver.TogglePin(Pin0);
					isButtonPressed = 1;
 140:	8a 2d       	mov	r24, r10
 142:	9b 2d       	mov	r25, r11
 144:	db cf       	rjmp	.-74     	; 0xfc <main+0x5c>

00000146 <_ZN19SerialCommunication8InitUartEj>:
#include <avr/io.h>
#include "SerialCommunication.h"

 void SerialCommunication::InitUart(unsigned int usartBaudRateRegisterValue)
{
	UBRRL = (unsigned char) usartBaudRateRegisterValue;
 146:	69 b9       	out	0x09, r22	; 9
	UBRRH = (unsigned char) (usartBaudRateRegisterValue >> 8);
 148:	70 bd       	out	0x20, r23	; 32

	// universal control and status registers 
	// REGISTeR B 
	// 8 Data bits, receive and transmit enabled, receive complete interrupt enabled
	UCSRB = (( 1 << TXEN ) | (1<< RXEN) | (1 << RXCIE));
 14a:	88 e9       	ldi	r24, 0x98	; 152
 14c:	8a b9       	out	0x0a, r24	; 10

	// REGISTER C
	// Set the most used serial settings: asynchronous, no parity, 8 bit, 1 stop bit.
	// The ATmega8 uses an URSEL bit, which is not present on newer chips.
	UCSRC = (1 << URSEL) | (1 << UCSZ1) | ( 1 << UCSZ0); 
 14e:	86 e8       	ldi	r24, 0x86	; 134
 150:	80 bd       	out	0x20, r24	; 32
 152:	08 95       	ret

00000154 <_ZN19SerialCommunication8SendCharEh>:
}

void SerialCommunication::SendChar( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) )
 154:	5d 9b       	sbis	0x0b, 5	; 11
 156:	fe cf       	rjmp	.-4      	; 0x154 <_ZN19SerialCommunication8SendCharEh>
	;
	/* Put data into buffer, sends the data */
	UDR = data;
 158:	6c b9       	out	0x0c, r22	; 12
 15a:	08 95       	ret

0000015c <_ZN19SerialCommunication10SendStringEPKc>:
}

void SerialCommunication::SendString(const char * str)
{
 15c:	0f 93       	push	r16
 15e:	1f 93       	push	r17
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	eb 01       	movw	r28, r22
	while(*str)
 166:	68 81       	ld	r22, Y
 168:	66 23       	and	r22, r22
 16a:	39 f0       	breq	.+14     	; 0x17a <_ZN19SerialCommunication10SendStringEPKc+0x1e>
 16c:	8c 01       	movw	r16, r24
 16e:	21 96       	adiw	r28, 0x01	; 1
	{
		SendChar(*str);
 170:	c8 01       	movw	r24, r16
 172:	f0 df       	rcall	.-32     	; 0x154 <_ZN19SerialCommunication8SendCharEh>
	UDR = data;
}

void SerialCommunication::SendString(const char * str)
{
	while(*str)
 174:	69 91       	ld	r22, Y+
 176:	61 11       	cpse	r22, r1
 178:	fb cf       	rjmp	.-10     	; 0x170 <_ZN19SerialCommunication10SendStringEPKc+0x14>
	{
		SendChar(*str);
		str++;
	}
}
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	1f 91       	pop	r17
 180:	0f 91       	pop	r16
 182:	08 95       	ret

00000184 <__itoa_ncheck>:
 184:	bb 27       	eor	r27, r27
 186:	4a 30       	cpi	r20, 0x0A	; 10
 188:	31 f4       	brne	.+12     	; 0x196 <__itoa_ncheck+0x12>
 18a:	99 23       	and	r25, r25
 18c:	22 f4       	brpl	.+8      	; 0x196 <__itoa_ncheck+0x12>
 18e:	bd e2       	ldi	r27, 0x2D	; 45
 190:	90 95       	com	r25
 192:	81 95       	neg	r24
 194:	9f 4f       	sbci	r25, 0xFF	; 255
 196:	01 c0       	rjmp	.+2      	; 0x19a <__utoa_common>

00000198 <__utoa_ncheck>:
 198:	bb 27       	eor	r27, r27

0000019a <__utoa_common>:
 19a:	fb 01       	movw	r30, r22
 19c:	55 27       	eor	r21, r21
 19e:	aa 27       	eor	r26, r26
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	aa 1f       	adc	r26, r26
 1a6:	a4 17       	cp	r26, r20
 1a8:	10 f0       	brcs	.+4      	; 0x1ae <__utoa_common+0x14>
 1aa:	a4 1b       	sub	r26, r20
 1ac:	83 95       	inc	r24
 1ae:	50 51       	subi	r21, 0x10	; 16
 1b0:	b9 f7       	brne	.-18     	; 0x1a0 <__utoa_common+0x6>
 1b2:	a0 5d       	subi	r26, 0xD0	; 208
 1b4:	aa 33       	cpi	r26, 0x3A	; 58
 1b6:	08 f0       	brcs	.+2      	; 0x1ba <__utoa_common+0x20>
 1b8:	a9 5d       	subi	r26, 0xD9	; 217
 1ba:	a1 93       	st	Z+, r26
 1bc:	00 97       	sbiw	r24, 0x00	; 0
 1be:	79 f7       	brne	.-34     	; 0x19e <__utoa_common+0x4>
 1c0:	b1 11       	cpse	r27, r1
 1c2:	b1 93       	st	Z+, r27
 1c4:	11 92       	st	Z+, r1
 1c6:	cb 01       	movw	r24, r22
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <strrev>

000001ca <strrev>:
 1ca:	dc 01       	movw	r26, r24
 1cc:	fc 01       	movw	r30, r24
 1ce:	67 2f       	mov	r22, r23
 1d0:	71 91       	ld	r23, Z+
 1d2:	77 23       	and	r23, r23
 1d4:	e1 f7       	brne	.-8      	; 0x1ce <strrev+0x4>
 1d6:	32 97       	sbiw	r30, 0x02	; 2
 1d8:	04 c0       	rjmp	.+8      	; 0x1e2 <strrev+0x18>
 1da:	7c 91       	ld	r23, X
 1dc:	6d 93       	st	X+, r22
 1de:	70 83       	st	Z, r23
 1e0:	62 91       	ld	r22, -Z
 1e2:	ae 17       	cp	r26, r30
 1e4:	bf 07       	cpc	r27, r31
 1e6:	c8 f3       	brcs	.-14     	; 0x1da <strrev+0x10>
 1e8:	08 95       	ret

000001ea <_exit>:
 1ea:	f8 94       	cli

000001ec <__stop_program>:
 1ec:	ff cf       	rjmp	.-2      	; 0x1ec <__stop_program>
